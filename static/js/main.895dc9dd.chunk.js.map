{"version":3,"sources":["components/jlpt4.js","components/login.js","components/contacts.js","components/navigationbars.js","App.js","serviceWorker.js","index.js"],"names":["JLPT","Component","Login","Contacts","state","contacts","this","props","contact_title","map","contact","class","name","email","company","catchPhrase","fetch","then","res","json","data","setState","catch","console","log","NavigationBars","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAUeA,E,iLANX,OACE,sD,GAHaC,aCQJC,E,iLANX,OACI,uD,GAHYD,aCgDLE,E,2MAdbC,MAAM,CACJC,SAAU,I,wEAhBV,OACA,6BACE,4BAAKC,KAAKC,MAAMC,eACfF,KAAKF,MAAMC,SAASI,KAAI,SAACC,GAAD,OACvB,yBAAKC,MAAM,QACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,cAAcD,EAAQE,MAChC,wBAAID,MAAM,iCAAiCD,EAAQG,OACnD,uBAAGF,MAAM,aAAaD,EAAQI,QAAQC,cAClC,sC,0CAUM,IAAD,OACjBC,MAAM,6CACHC,MAAM,SAAAC,GAAG,OAAEA,EAAIC,UACfF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAChB,SAASe,OAEzBE,MAAMC,QAAQC,S,GA3BEvB,aC8BRwB,E,iLAzCX,OACE,kBAAC,IAAD,KACA,6BACA,yBAAKd,MAAM,+CACT,uBAAGA,MAAM,eAAee,KAAK,KAA7B,yBACA,4BAAQC,KAAK,SAAShB,MAAM,iBAAiBiB,cAAY,WAAWC,cAAY,aAC9EC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC3D,0BAAMrB,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BsB,GAAG,aACvC,wBAAItB,MAAM,sBACR,wBAAIA,MAAM,mBAAkB,uBAAGA,MAAM,WAAWe,KAAK,KAAzB,OAAiC,0BAAMf,MAAM,WAAZ,eAC7D,wBAAIA,MAAM,YAAW,uBAAGA,MAAM,WAAWe,KAAK,KAAzB,YACrB,wBAAIf,MAAM,YAAW,uBAAGA,MAAM,WAAWe,KAAK,KAAzB,gBAGvB,wBAAIf,MAAM,mCACN,wBAAIA,MAAM,YAAW,kBAAC,IAAD,CAAMA,MAAM,WAAWuB,GAAG,UAA1B,UACrB,wBAAIvB,MAAM,YAAW,kBAAC,IAAD,CAAMA,MAAM,WAAWuB,GAAG,aAA1B,gBAI7B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,CAAU3B,cAAe,0B,GAhCRP,aCyBdmC,E,iLAzBX,OACE,yBAAKzB,MAAM,aACX,kBAAC,EAAD,W,GAJYV,aCQEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.895dc9dd.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nclass JLPT extends Component {\n  render(){\n    return(\n      <div>THIS IS JLPT PART</div>\n    );\n  }\n}\n\nexport default JLPT;","import React,{Component} from 'react'\n\nclass Login extends Component{\n  render(){\n    return(\n        <div>This is Login Page</div>\n    );\n  }\n}\n\nexport default Login","import React, {Component} from 'react'\n\n// const Contacts = ({contacts}) => {\n//   return(\n//     <div>\n//       <centre><h1>Contact List</h1></centre>\n//       {contacts.map((contact) => (\n//         <div class=\"card\">\n//           <div class=\"card-body\">\n//             <h5 class=\"card-title\">{contact.name}</h5>\n//             <h6 class=\"card-subtitle mb-2 text-muted\">{contact.email}</h6>\n//             <p class=\"card-text\">{contact.company.catchPhrase}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   )\n// };\n\nclass Contacts extends Component {\n  render(){\n    return(\n    <div>\n      <h1>{this.props.contact_title}</h1>\n      {this.state.contacts.map((contact) => (\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{contact.name}</h5>\n            <h6 class=\"card-subtitle mb-2 text-muted\">{contact.email}</h6>\n            <p class=\"card-text\">{contact.company.catchPhrase}</p>\n          </div><span/>\n        </div>\n      ))}\n    </div>      \n    );\n  }\n  state={\n    contacts: []\n  };\n\n  componentDidMount(){\n    fetch('http://jsonplaceholder.typicode.com/users')\n      .then( res=>res.json())\n      .then((data)=>{\n        this.setState({contacts:data})\n      })\n      .catch(console.log)\n  }  \n};\n\nexport default Contacts","import React,{Component} from 'react';\nimport { BrowserRouter as Router,Route,Switch,Link,NavLink } from 'react-router-dom';\nimport JLPT from './jlpt4';\nimport Login from './login'\nimport Contacts from './contacts';\n\nclass NavigationBars extends Component{\n  render(){\n    return (\n      <Router>\n      <div>\n      <nav class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\"/\">Nihonggo Vocabularies</a>\n        <button type=\"button\" class=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#main-menu\"\n          aria-controls=\"main-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"main-menu\">\n          <ul class=\"navbar-nav mr-auto\">\n            <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home<span class=\"sr-only\">(current)</span></a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" href=\"/\">JLPT N4</a></li>            \n            <li class=\"nav-item\"><a class=\"nav-link\" href=\"/\">Genki Book</a></li>\n\n          </ul>\n          <ul class=\"navbar-nav navbar-right mr-auto\">\n              <li class=\"nav-item\"><Link class=\"nav-link\" to=\"/login\">Login</Link></li>\n              <li class=\"nav-item\"><Link class=\"nav-link\" to=\"/contacts\">Contacts</Link></li>\n          </ul>          \n        </div>\n      </nav>\n      <Switch>\n          <Route path=\"/jlpt\">\n            <JLPT />\n          </Route>\n          <Route path=\"/login\">\n            <Login/>\n          </Route>\n          <Route path=\"/contacts\">\n            <Contacts contact_title={\"Contact Lists\"}/>\n          </Route>\n        </Switch>      \n\n    </div>      \n    </Router>    \n    );\n\n  }\n}\n\nexport default NavigationBars;","import React , {Component} from 'react';\nimport './App.css';\nimport NavigationBars from './components/navigationbars';\n\nclass App extends Component{\n  render(){\n    return(\n      <div class='container'>\n      <NavigationBars />\n    \n      {/* <Contacts contacts={this.state.contacts}/> */}\n      </div>\n    );\n  }\n\n  // state={\n  //   contacts: []\n  // };\n\n  // componentDidMount(){\n  //   fetch('http://jsonplaceholder.typicode.com/users')\n  //     .then( res=>res.json())\n  //     .then((data)=>{\n  //       this.setState({contacts:data})\n  //     })\n  //     .catch(console.log)\n  // }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}